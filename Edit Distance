class Solution{
    public int minDistance(String s1,String s2){
        int n = s1.length();
        int m = s2.length();
        if(n==0)
            return m;
        if(m==0)
            return n;
        int[][] dp = new int[n+1][m+1];
        for(int row[]:dp)
            Arrays.fill(row,-1);
        return editDist(s1,s2,n,m,dp);
    }
    public static int editDist(String s1,String s2,int n,int m,int dp[][]){
        if(n==0 && m==0)
            return 0;
        if(n==0)
            return m;
        if(m==0)
            return n;
        if(dp[n][m]!=-1)
            return dp[n][m];
        if(s1.charAt(n-1)==s2.charAt(m-1))
            return dp[n][m]=editDist(s1,s2,n-1,m-1,dp);
        else{
            int insert = 1+editDist(s1,s2,n,m-1,dp);
            int delete = 1+editDist(s1,s2,n-1,m,dp);
            int replace = 1+editDist(s1,s2,n-1,m-1,dp);
            return dp[n][m] = Math.min(insert,Math.min(delete,replace));
        }
    }
}
